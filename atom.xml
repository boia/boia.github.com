<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[boia's博客]]></title>
  <link href="http://boia.github.com/atom.xml" rel="self"/>
  <link href="http://boia.github.com/"/>
  <updated>2013-03-10T21:16:50+08:00</updated>
  <id>http://boia.github.com/</id>
  <author>
    <name><![CDATA[boia]]></name>
    <email><![CDATA[zhengwang2314@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arduino链接yeelink实现物联网]]></title>
    <link href="http://boia.github.com/blog/2013/03/08/arduino-yeelink/"/>
    <updated>2013-03-08T19:55:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/08/arduino-yeelink</id>
    <content type="html"><![CDATA[<h2>Arduino</h2>

<p>Arduino Mega2560买来也将近一个多月了，一直放着没用，昨天想着试试Ethernet Shield，将Arduino作为一个服务器，在浏览器上可以控制Arduino，本来想着也不是太难，但自己真正搞起来了就不是那么一回事了。</p>

<br>


<p><img src="http://boia.github.com/images/post/ethernet.jpg" title="Arduino Yeelink" ></p>

<!-- more -->


<br>


<h3>搭建局域网</h3>

<p>先不连到网络，来搭建一个局域网，将本机和Arduino用网线连起来(用路由器的自动获取IP应该更简单一点)，</p>

<h3>下载程序配置</h3>

<p>昨天在Windows XP下找驱动，发现在网上到处找不到，今天上午就在Arduino软件下(我用的是Arduino1.0.3)看到了Drivers文件夹，这让我情何以堪啊，不过需要注意的是在设备管理器下更新驱动程序选择文件夹最好选drivers而不是FTDI USB Drivers。</p>

<p>接着烧程序，因为官方写了Ethernet程序库，所以我就随便选了个，打开<code>File/Examples/Ethernet/WebServe</code>文件，然后将程序中的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IPAddress ip(192,168,1, 177);</span></code></pre></td></tr></table></div></figure>


<p>改成你本机IP的同一段</p>

<p>打开浏览器输入<code>http://192.168.1.177</code>，注意<strong>输入的是你设置的IP</strong>，简单的WebServer就搭建起来了</p>

<h3>Yeelink</h3>

<p>早就听说<strong>物联网</strong>这个词了，却一直没有真正地去探索
接入Yeelink平台, 并通过应用进行远程管理和控制, 使您的设备快速迈进物联网时代。</p>

<p><a href="" title="http://www.yeelink.net/develop/quickstart">快速开始</a>这里有关于yeelink用户注册，新建设备，加传感器初级教程，这里就不细说了。</p>

<figure class='code'><figcaption><span>yeelink</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> Yeelink sensor client power switch example
</span><span class='line'> */
</span><span class='line'>
</span><span class='line'>#include &lt;SPI.h>
</span><span class='line'>#include &lt;Ethernet.h>
</span><span class='line'>#include &lt;Wire.h>
</span><span class='line'>#include &lt;math.h>
</span><span class='line'>
</span><span class='line'>byte buff[2];
</span><span class='line'>
</span><span class='line'>// for yeelink api
</span><span class='line'>#define APIKEY         "*****" // replace your yeelink api key here
</span><span class='line'>#define DEVICEID        // replace your device ID
</span><span class='line'>#define SENSORID        // replace your sensor ID
</span><span class='line'>
</span><span class='line'>// assign a MAC address for the ethernet controller.
</span><span class='line'>byte mac[] = { 0x00, 0x1D, 0x72, 0x82, 0x35, 0x9D};
</span><span class='line'>// initialize the library instance:
</span><span class='line'>EthernetClient client;
</span><span class='line'>char server[] = "api.yeelink.net";   // name address for yeelink API
</span><span class='line'>
</span><span class='line'>unsigned long lastConnectionTime = 0;          // last time you connected to the server, in milliseconds
</span><span class='line'>boolean lastConnected = false;                 // state of the connection last time through the main loop
</span><span class='line'>const unsigned long postingInterval = 3*1000; // delay between 2 datapoints, 30s
</span><span class='line'>String returnValue = ""; 
</span><span class='line'>boolean ResponseBegin = false;
</span><span class='line'>
</span><span class='line'>void setup() {
</span><span class='line'>  pinMode(7, OUTPUT);
</span><span class='line'>
</span><span class='line'>  Wire.begin();
</span><span class='line'>  // start serial port:
</span><span class='line'>  Serial.begin(57600);
</span><span class='line'>  // start the Ethernet connection with DHCP:
</span><span class='line'>  if (Ethernet.begin(mac) == 0) {
</span><span class='line'>    Serial.println("Failed to configure Ethernet using DHCP");
</span><span class='line'>    for(;;)
</span><span class='line'>      ;
</span><span class='line'>  }
</span><span class='line'>  else {
</span><span class='line'>    Serial.println("Ethernet configuration OK");
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void loop() {
</span><span class='line'>  // if there's incoming data from the net connection.
</span><span class='line'>  // send it out the serial port.  This is for debugging
</span><span class='line'>  // purposes only:
</span><span class='line'>
</span><span class='line'>  if (client.available()) {
</span><span class='line'>    char c = client.read();
</span><span class='line'>   // Serial.print(c);
</span><span class='line'>      if (c == '{')
</span><span class='line'>        ResponseBegin = true;
</span><span class='line'>      else if (c == '}')
</span><span class='line'>        ResponseBegin = false;
</span><span class='line'>
</span><span class='line'>      if (ResponseBegin)
</span><span class='line'>        returnValue += c;   
</span><span class='line'>  }
</span><span class='line'>  if (returnValue.length() !=0 && (ResponseBegin == false))
</span><span class='line'>  {
</span><span class='line'>    Serial.println(returnValue);
</span><span class='line'>    
</span><span class='line'>    if (returnValue.charAt(returnValue.length() - 1) == '1') {
</span><span class='line'>      Serial.println("turn on the LED"); 
</span><span class='line'>      digitalWrite(7, HIGH);
</span><span class='line'>
</span><span class='line'>    } 
</span><span class='line'>      else if(returnValue.charAt(returnValue.length() - 1) == '0') {
</span><span class='line'>      Serial.println("turn off the LED"); 
</span><span class='line'>      digitalWrite(7, LOW);
</span><span class='line'>    }
</span><span class='line'>     returnValue = "";
</span><span class='line'>  }
</span><span class='line'>  // if there's no net connection, but there was one last time
</span><span class='line'>  // through the loop, then stop the client:
</span><span class='line'>  if (!client.connected() && lastConnected) {
</span><span class='line'>    Serial.println();
</span><span class='line'>    Serial.println("disconnecting.");
</span><span class='line'>    client.stop();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  // if you're not connected, and ten seconds have passed since
</span><span class='line'>  // your last connection, then connect again and send data:
</span><span class='line'>  if(!client.connected() && (millis() - lastConnectionTime > postingInterval)) {
</span><span class='line'>    // read sensor data, replace with your code
</span><span class='line'>    //int sensorReading = readLightSensor();
</span><span class='line'>    Serial.print("yeelink:");
</span><span class='line'>    //get data from server  
</span><span class='line'>    getData();
</span><span class='line'>  }
</span><span class='line'>  // store the state of the connection for next time through
</span><span class='line'>  // the loop:
</span><span class='line'>  lastConnected = client.connected();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>// this method makes a HTTP connection to the server and get data back
</span><span class='line'>void getData(void) {
</span><span class='line'>  // if there's a successful connection:
</span><span class='line'>  if (client.connect(server, 80)) {
</span><span class='line'>    Serial.println("connecting...");
</span><span class='line'>    // send the HTTP GET request:
</span><span class='line'>    
</span><span class='line'>    client.print("GET /v1.0/device/");
</span><span class='line'>    client.print(DEVICEID);
</span><span class='line'>    client.print("/sensor/");
</span><span class='line'>    client.print(SENSORID);
</span><span class='line'>    client.print("/datapoints");
</span><span class='line'>    client.println(" HTTP/1.1");
</span><span class='line'>    client.println("Host: api.yeelink.net");
</span><span class='line'>    client.print("Accept: *");
</span><span class='line'>    client.print("/");
</span><span class='line'>    client.println("*");
</span><span class='line'>    client.print("U-ApiKey: ");
</span><span class='line'>    client.println(APIKEY);
</span><span class='line'>    client.println("Content-Length: 0");
</span><span class='line'>    client.println("Connection: close");
</span><span class='line'>    client.println();
</span><span class='line'>    Serial.println("print get done.");
</span><span class='line'>    
</span><span class='line'>  } 
</span><span class='line'>  else {
</span><span class='line'>    // if you couldn't make a connection:
</span><span class='line'>    Serial.println("connection failed");
</span><span class='line'>    Serial.println();
</span><span class='line'>    Serial.println("disconnecting.");
</span><span class='line'>    client.stop();
</span><span class='line'>  }
</span><span class='line'>   // note the time that the connection was made or attempted:
</span><span class='line'>  lastConnectionTime = millis();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>你只要将程序中的三个常量APIKEY DEVICEID SENSORID改成你自己在yeelink上得到的值。</p>

<br>


<h3>附上两张照片</h3>

<br>


<p><img class="left" src="http://boia.github.com/images/post/arduino2.png" title="Arduino Yeelink" alt="Arduino Yeelink"></p>

<br><br>


<p><img class="left" src="http://boia.github.com/images/post/arduino3.png" title="Arduino Yeelink" alt="Arduino Yeelink"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数独(无canvas)]]></title>
    <link href="http://boia.github.com/blog/2013/03/07/sudu/"/>
    <updated>2013-03-07T15:38:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/07/sudu</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>闲来无事玩数独，就想到了用javascript来写一个数独游戏，觉得用DOM写比canvas要简单的多，只是对DOM的API特别熟悉，不过API并不是太多，看了一下就开始写了，在设计和美工方面并没有用太多时间，所以美工也很糙，主要suduku的算法确实卡了好长一段时间，不过也写出了平庸的算法，没辙啊，对算法不感冒是很悲哀的，一直没明白，为什么选关以后数据就会变乱了。</p>

<!-- more -->




<br><br><br>


<p><img src="http://boia.github.com/images/post/sudu.png" title="sudu" ></p>

<br>


<p><a href="http://boia.github.com/game/sudu/sudu.html">开始游戏</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蘑菇和小熊的游戏]]></title>
    <link href="http://boia.github.com/blog/2013/03/07/mushroom_bear/"/>
    <updated>2013-03-07T14:56:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/07/mushroom_bear</id>
    <content type="html"><![CDATA[<p>把一个游戏移植过来，游戏是从一个<a href="http://jacebook.co.uk/blog/2010/09/11/html5-writing-a-game/">老外</a>那里看见的，他写了关于这个游戏的教程,我发现他的代码并不是特别好，也比较地乱，然后我就想着自己做一个，素材就直接从他那里盗过来了，终归我对设计并不是特别感兴趣,还有很多bug需要修改，不要吐槽。</p>

<!-- more -->


<br><br><br>


<p><img src="http://boia.github.com/images/post/mush_bear.png" title="mushroom_bear" ></p>

<br>


<p><a href="http://boia.github.com/game/mush-bear/game.html">开始游戏</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[invalid byte sequence in GBK]]></title>
    <link href="http://boia.github.com/blog/2013/03/06/octopress/"/>
    <updated>2013-03-06T19:31:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/06/octopress</id>
    <content type="html"><![CDATA[<h2>痛不欲生的windows</h2>

<p>今天360奇迹般地发挥他的作用，将我jajl-ruby里的一个文件给删了，这尼玛痛苦地搞了一下午啊，还将ruby和devkit都重新安装了一遍，360是白痴，我也变成白痴了？</p>

<!-- more -->


<h2>invalid byte sequence in GBK</h2>

<p>接着就出现了编码问题，对ruby几乎不懂，看懂代码还是可以的，然后就一个个文件地查，到底哪个文件是转换文件格式编码的，最后锁定到了<code>convertible.rb</code>(还有iconf)</p>

<p>真心还是不懂，也忘了输了什么关键词，就找到<a href="https://github.com/imathis/octopress/issues/232">解决方法</a></p>

<br><br><br>


<p><img src="http://boia.github.com/images/post/1.png" title="imath" ></p>

<br><br><br>


<p>只要改成以下代码就可以了，在<code>convertible.rb</code>的28行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.content = File.read(File.join(base, name), :encoding => "utf-8")</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试第一站—————联想(带题目和我做的)]]></title>
    <link href="http://boia.github.com/blog/2013/03/06/lenovo/"/>
    <updated>2013-03-06T10:54:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/06/lenovo</id>
    <content type="html"><![CDATA[<p>昨天下午孤身来到联想面试，觉得最不顺利的事情就是没找到333(外)公交车。先挂个联想公司的招牌</p>

<p><img src="http://boia.github.com/images/post/lenovo.png" title="Lenovo" ></p>

<!-- more -->


<p>见到HR，礼貌地问候一句，然后被他领到一个相对比较小的会议室里(大概就是面议室)，然后他叫我等下，随后找了面试官过来，面试官估计也是搞技术的，我们就很随意地聊起来了，问题也不多，而且主要还是我说的比较多，叽叽呱呱地一通。随便挑几个问题：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>他: 简历写得够简单的，怎么不加些链接可以访问下你以前做的东西呢？
</span><span class='line'>我: 因为简历是上周赶出来的，而blog是最近几天弄好的，很多做的东西也没有从其他网站整理出    来。
</span><span class='line'>...
</span><span class='line'>他: 我对canvas的了解也不是太深，你能简单介绍下吗？
</span><span class='line'>我: ...
</span><span class='line'>...
</span><span class='line'>他： 你能谈下物联网吗？(因为这是我毕设研究的)
</span><span class='line'>我:  ...
</span><span class='line'>他： 简单说下你大学的情况
</span><span class='line'>我:  ...</span></code></pre></td></tr></table></div></figure>


<h2>题目</h2>

<p>然后他给我出了一道关于html5的题目，画一个饼状图然后将鼠标移到上面可以得到信息。
我6点开始写，写到10点左右弄好后，就给他发邮件了，其他就看造化了。</p>

<iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/7hkyx/embedded/result,js,html,css/light/"></iframe>


<p>程序比较简单，主要是canvas事件处理问题，以后可以将这道题目发个教程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress侧边栏放上Flickr相片]]></title>
    <link href="http://boia.github.com/blog/2013/03/04/flickr-sidebar/"/>
    <updated>2013-03-04T22:35:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/04/flickr-sidebar</id>
    <content type="html"><![CDATA[<p>今天来点生活式的技术，在侧边栏，当然你也可以在页面上放上Flickr相片</p>

<h2>Demo</h2>

<p><a href="http://boia.github.com/blog/archives/">octopress放入<strong>Flickr</strong>相册</a></p>

<!-- more -->


<h2>注册Flickr</h2>

<p><a href="http://www.flickr.com/">Flickr</a>来自yahoo，所以注册的是雅虎账号</p>

<h2>下载Flickr-Badge</h2>

<p>Flickr-Badge是一个octopress插件，它托管在github上</p>

<p>输以下命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&#123;% git clone https://github.com/chronon/Octopress-Flickr-Badge.git %}</span></code></pre></td></tr></table></div></figure>


<h2>文件</h2>

<p> 把<code>flickr.html</code>放到<code>source/_includes/custom/asides/</code>中
<code>_styles.scss</code>放到 <code>sass/custom</code>中，如果你的<code>_styles.scss</code>以前有过修改，就把里面代码copy出来然后放到以前文件的尾部</p>

<h2>配置</h2>

<p>将<code>custom/asides/flickr.html</code> 放到<code>_config.yml</code>中default_asides的[]中.</p>

<p>在<code>_config.yml</code>的尾部加以下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Flickr Badge
</span><span class='line'>flickr_user:            # user id (not username)
</span><span class='line'>flickr_count:           # 照片数量
</span><span class='line'>flickr_display:         # random or latest(随机或者最新)
</span><span class='line'>flickr_size:            # t (thumbnail), s (small square), m (medium)
</span><span class='line'>flickr_source:          # user, user_tag, all, all_tag
</span><span class='line'>flickr_tag:             # tagname - set if flickr_source is set to user_tag or all_tag</span></code></pre></td></tr></table></div></figure>


<p>flickr_user不是用户名，是用户id，你可以从<a href="http://idgettr.com/">idgettr.com</a>获得</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在octopress中加入jsfiddle]]></title>
    <link href="http://boia.github.com/blog/2013/03/04/jsfiddle-for-octopress/"/>
    <updated>2013-03-04T14:23:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/04/jsfiddle-for-octopress</id>
    <content type="html"><![CDATA[<p><strong>jsFiddle</strong>是一个web开发人员的练习场，一个可以在很多方面应用的工具。我们可以用他来在线编辑一些HTML,CSS,javascript片段。你编辑的代码可以与其他人分享，或嵌入你的博客等。使用这个工具，javascript的开发者可以很容易的发现并解决BUG问题。你还可以选择你自己熟悉的流行的各种javascript库来进行开发，对XHR的支持也非常好，还可以模拟一些响应等。</p>

<p>今天我们来学习将<strong>jsfiddle</strong>插件放入到octopress中。</p>

<!-- more -->


<h2>下载<strong>jsfiddle</strong>插件</h2>

<p>先用git命令将插件下载下来</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/ShaunaGordon/octopress-jsfiddle.git</span></code></pre></td></tr></table></div></figure>


<p>然后将里面的<code>jsfiddle.rb</code>拷贝到 <code>/plugins</code>中</p>

<h2>一般语法</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&#123;% jsfiddle shorttag [tabs] [skin] [height] [width] %}</span></code></pre></td></tr></table></div></figure>


<p>缺省值如下:</p>

<ul>
<li>tabs: <code>js,resources,html,css,result</code></li>
<li>skin: <code>light</code></li>
<li>height: <code>300px</code></li>
<li>width: <code>100%</code></li>
</ul>


<p>如果你就想设置height，而前面几个值都用默认的，那么填default就行了</p>

<h3>举例</h3>

<p>这里我直接拿<a href="http://www.cnblogs.com/iamzhanglei/archive/2011/10/07/2199306.html">张磊</a>的代码作为测试</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&#123;% jsfiddle LHWmv result,js,html,css presentation 500px %}</span></code></pre></td></tr></table></div></figure>


<h3>结果</h3>

<iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/LHWmv/embedded/result,js,html,css/presentation/"></iframe>


<h2>总结</h2>

<p><strong>jsFiddle</strong>以前在张磊的博客看见的时候挺新颖的，现在在自己的blog里加上这个插件还是分外激动的，以后就不用上面一段代码，下面一个演示那么墨迹了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress增加新浪微博侧栏]]></title>
    <link href="http://boia.github.com/blog/2013/03/04/octopresss-weibo/"/>
    <updated>2013-03-04T10:24:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/04/octopresss-weibo</id>
    <content type="html"><![CDATA[<p><strong>Geek</strong>是在IT行业对那些智力超群且对某样技术有狂热兴趣的人的称号，随着互联网技术在中国逐渐流行起来，中国所谓的各个IT行业的<strong>Geek</strong>也越来越多。</p>

<p>之所以谈这个不是我自诩为<strong>Geek</strong>，而是希望中国想搞技术的人都能够像<strong>Geek</strong>一样专心。</p>

<p>今天来介绍下在Octopress增加侧栏，以新浪微博秀为例子，</p>

<!-- more -->


<p>首先到<a href="http://weibo.com/tool/weiboshow" title="Title">微博秀</a>设置自己喜欢的样式，设置完成以后，将代码获得，如果懂html的话应该能明白这是个内联框架</p>

<p>接着在<code>\source\_includes\custom\asides</code>中新建一个<code>weibo.html</code>，最好是放在custom下，有些人喜欢在<code>\source\_includes\asides</code>中修改或者创建，一旦主题换了，那些自己改过的都会消失，这就得不偿失了，在<code>weibo.html</code>中加入以下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;section class="well"&gt;
</span><span class='line'>  &lt;h1&gt;新浪微博&lt;/h1&gt;
</span><span class='line'>  &lt;ul id="weibo"&gt;
</span><span class='line'>    &lt;li&gt;
</span><span class='line'>      &lt;iframe 
</span><span class='line'>        width="100%" 
</span><span class='line'>        height="550" 
</span><span class='line'>        class="share_self" 
</span><span class='line'>        frameborder="0" 
</span><span class='line'>        scrolling="no" 
</span><span class='line'>        src="http://widget.weibo.com/weiboshow/index.php?width=0&height=550&ptype=1&speed=0&skin=&isTitle=0&noborder=1&isWeibo=1&isFans=&uid=2552329061&verifier=80884619"&gt;
</span><span class='line'>      &lt;/iframe&gt;
</span><span class='line'>    &lt;/li&gt;
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<p>最后就是在<code>_config.yml</code>中配置了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> #weibo
</span><span class='line'> #http://weibo.com/tool/weiboshow to get your uid and verifier
</span><span class='line'>weibo_uid: #你自己的微博id(在生成的代码中可以看见)
</span><span class='line'>weibo_verifier: #你自己的verifier
</span><span class='line'>weibo_fansline: 0   # How many lines for the fan list
</span><span class='line'>weibo_show: true    # Whether you want your weibo content to be shown
</span><span class='line'>weibo_pic: true     # Whether you want the pictures in weibo to be shown
</span><span class='line'>weibo_skin: 10      # Please refer to http://weibo.com/tool/weiboshow
</span><span class='line'>weibo_share: true   # Whether show the sharing button</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress初级安装]]></title>
    <link href="http://boia.github.com/blog/2013/03/02/my-first/"/>
    <updated>2013-03-02T12:30:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/02/my-first</id>
    <content type="html"><![CDATA[<p>用github有一段时间了，也看过<a href="http://www.worldhello.net/" title="Title">蒋鑫</a>老师的<strong>git权威指南</strong>，
可是总不能很好的理解git版本管理问题，但经过这次一折腾，总归还是懂了些，所以有些东西别只是看，
也要踏踏实实地去做一遍，这样才能更好的去理解。</p>

<p>今天我们学习Octopress的安装，在windows下运行Octopress博客并发布到Github Pages上。</p>

<!-- more -->


<h2>①安装Git</h2>

<p><a href="https://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git" title="title">msysgit</a>
是一git在windows下的管理软件，这里要注意的一点是有一个<strong>SSH Keys</strong>的问题，你必须生成密钥然后
放在<strong><a href="http://github.com" title="Title">git</a></strong>网站对应的地方，否则push的话会出现error</p>

<h2>②安装Ruby</h2>

<p>因为Octopress是用ruby写的，所以安装ruby也是必须的，最新的Octopress指定的Ruby版本好像是1.9.3，
所以我也推荐大家下<strong><a href="http://rubyinstaller.org/" title="Title">ruby1.9.3</a></strong>，在windows的安装就不用我教大家了
安装好以后，在cmd中敲击以下代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby --version</span></code></pre></td></tr></table></div></figure>


<p>如果出现版本号的话说明你安装正确了</p>

<h2>③安装Devkit</h2>

<p>接着安装Devkit，我下的是4.5.2版本，<a href="https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe" title="Title">DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe</a>
下载到E:盘，在win的cmd窗口进入到e，然后敲击下面的命令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd E:DevKit
</span><span class='line'>ruby dk.rb init
</span><span class='line'>ruby dk.rb install</span></code></pre></td></tr></table></div></figure>


<h2>④安装python</h2>

<p>安装Python是为了博客代码加亮，在windows下最好下载<strong><a href="http://www.activestate.com/activepython/downloads" title="Title">python2.7</a>，</strong>
别下载Python3，继续在cmd中执行下面命令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>easy_install pygments</span></code></pre></td></tr></table></div></figure>


<h2>⑤下载Octopress</h2>

<p>以前玩rails的时候，用gem install rails总是出现错误，然后就谷歌、百度轮番找，发现原来是网站被河蟹了，
马上就翻墙了，自由门是最常用的，最近谷歌出了个好玩意儿，goagent(不过这东西下载前还得翻墙)，只要有一个
google App就能每天用1G，我就一口气申请了10个App，然后每天无止境的翻墙了，而且至今没出现不稳定或者崩溃的问题。
这里就不写goagent的教程了，大家可以百度一下，步骤还是很简单的。</p>

<p>为什么这里要说vpn呢？其实是因为要安装bundler(是一个ruby的包)，所以应该需要翻墙吧。</p>

<p>首先下载Octopress源码，打开cmd &lt;&lt;E回车，选择了E盘以后，输入命令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git  octopress</span></code></pre></td></tr></table></div></figure>


<p>如果你ssh keys没设置对的话，估计这里也成功不了</p>

<p>接着安装Octopress的依赖项，还是在cmd中敲命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<h2>⑥创建版本库</h2>

<p>登录到<a href="https://github.com/" title="Title">Github</a>，点击Create A Repository，这时候需要输入版本名，
非常非常重要的一点版本名的格式<strong>username.github.com</strong>，你自己username不用我教吧？</p>

<h2>⑦将Octopress发布到Github</h2>

<p>说发布之前，咱们还要对windows环境变量配置一下为了支持中文编码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LANG=zh_CN.UTF-8
</span><span class='line'>LC_ALL=zh_CN.UTF-8</span></code></pre></td></tr></table></div></figure>


<p>这样说我不知道懂不懂，不懂的话，可以写信发我邮箱<a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x7a;&#104;&#x65;&#110;&#103;&#119;&#97;&#110;&#x67;&#50;&#x33;&#x31;&#x34;&#64;&#113;&#113;&#46;&#x63;&#111;&#x6d;">&#x7a;&#104;&#x65;&#110;&#103;&#119;&#x61;&#x6e;&#x67;&#50;&#51;&#x31;&#x34;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#109;</a></p>

<p>在次打开cmd，进入到Octopress所在的目录  (cd octopress即可进入)，输入命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>按提示输入刚才新建的Repo地址，类似： git@github.com:username/username.github.com 或
git@github.com:username/username.github.com.git。</p>

<p>完成以后输入命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install
</span><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>对了，这里还有一个可能会遇到的错误，错误提示是关于rake版本，然后说use bundle exex可能可以解决，
那么你只要在输rake前加上bundle exec就好了</p>

<p>其中rake install是安装Octopress默认主题的，
rake gnerate是生成静态页面的，这两个命令是必须运行的，
而rake preview则是用来本地浏览的（运行时看屏幕上提示，按Ctrl+C并输入Y来终止批处理操作），
运行后打开浏览器，输入 http://localhost:4000/ 就可以看到如下的界面了，
不想预览的话也可以不运行，直接进入下一步。</p>

<h2>⑧将博客发布到Github</h2>

<p>cmd输入下面命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy  </span></code></pre></td></tr></table></div></figure>


<p>这样，生成的内容将会自动发布到master分支，并且可以使用 http://username.github.com 访问内容。</p>

<h2>⑨将源文件发布到source分支下</h2>

<p>可以说你的工作已经全部最好了，可你想万一其他配置文件丢失了怎么办？这时候你就要将源文件放到git中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "1st"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>终于OK了，今天讲的是安装，以后会有更多惊喜。</p>
]]></content>
  </entry>
  
</feed>
