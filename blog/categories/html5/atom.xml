<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: html5 | boia's博客]]></title>
  <link href="http://boia.github.com/blog/categories/html5/atom.xml" rel="self"/>
  <link href="http://boia.github.com/"/>
  <updated>2013-05-07T17:28:03+08:00</updated>
  <id>http://boia.github.com/</id>
  <author>
    <name><![CDATA[boia]]></name>
    <email><![CDATA[zhengwang2314@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[渐变的旋转进度条]]></title>
    <link href="http://boia.github.com/blog/2013/04/23/process/"/>
    <updated>2013-04-23T16:34:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/04/23/process</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>这两天公司在做手机管家，很意外也是第一次听说公司的手机管家是用JS写的，然后各种费解(又一次无知了)。正巧对canvas有一些见解，所以永哥叫我画一个随杀毒变化的圆形进度条，然后就不废话，直接上图吧。<br></p>

<p><img width="200" class="left half" src="http://boia.github.com/images/post/process.jpg" title="进度条" alt="进度条!"><br><br></p>

<!-- more -->


<h2>jsfiddle上效果</h2>

<p>先在jsfiddle中看看效果</p>

<p><iframe style="width: 100%; height: 480px" src="http://jsfiddle.net/DbGPe/embedded/result,js,html,css/presentation/"></iframe></p>

<br><br>


<h2>代码分析</h2>

<p>① 如何取得进度条上的值</p>

<p>在杀毒的正式版本中，后台会给我发实时变化的数据，因为我在调试，所以自己加了进度条控件
<code>&lt;input type="range" value="60" id="range" /&gt;</code>，在Chrome浏览器上是一个可以左右拉并且有范围的控件。</p>

<p>获得控件上的值只要用DOM的getElementById方法
```javascript
var range = document.getElementById('range');
var num1 = parseInt(range.value);
range.onchange = function(){</p>

<pre><code>num1 = parseInt(range.value);   
move(point);
</code></pre>

<p>};
```</p>

<p>我这里因为是测试版本，所以用了num1命名，不建议你写代码用这些没有意义的命名，num1实际上就是查毒时你得的分数，这里千万要注意的是用range.value获得类型是字符串的，但咱们需要的是一个int类型的，所以你可以用<code>new Number(range.value)</code>或者<code>parseInt(range.value)</code>两种方法将字符串转化为整数类型。你先别考虑move(point)这个函数调用。这里特别要强调的是range.onchange，这其实是控件改变时触发事件，这个事件也很管用，很多网站注册账号时，当你输入一个新的账号，他就能立刻将数据返回到后台，查询数据库，进行验证。</p>

<br>


<p>② 初始化</p>

<p>其实第一步咱们需要进行一些初始化
```
var canvas = document.getElementById('mycanvas');
var ctx = canvas.getContext('2d');
var x = 100,</p>

<pre><code>y = 100,
r = 40,
ringWidth = 10;     
</code></pre>

<p>var num = num1;
var point = 50;
```</p>

<p>(x,y,r,ringwidth)依次对应(旋转条相对于canvas的圆心坐标，圆心半径，圆环宽度)，因为在函数中咱可能会重复用到，所以咱们命名了变量。point是一个实时变化的分数，动画效果是逐渐+1或者-1来实现的，用一个point咱可以随意地操作进度条。num咱们在函数中介绍。</p>

<br>


<p>③ 动画函数</p>

<p>```javascript
var move = function(point){</p>

<pre><code>    num = num1;
    /*每次画图先将图像擦除*/
    ctx.clearRect(x-r-5,y-r-5,2*(r+5),2*(r+5));

    /*画圆环*/
    ctx.beginPath();
    ctx.fillStyle = "transparent";
    ctx.arc(x,y,r+ringWidth/2,0,2*Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.fillStyle = "transparent";
    ctx.arc(x,y,r-ringWidth/2,0,2*Math.PI); 
    ctx.fill(); 
    ctx.beginPath();
    ctx.lineWidth = ringWidth;
    var angle = 1.5*Math.PI-point*Math.PI/50;

    /*canvas中只有线性渐变和放射型渐变，我还没想出好的方法，所以讲圆分成了左右两个半圆来处理*/
    var leftGrad,rightGrad;

    /*每个分值都会有不同的渐变*/
    if(point &lt;= 50){
        leftGrad =  ctx.createLinearGradient(x,y-r,x,y+r);
        leftGrad.addColorStop(0.1,'#ff5151');   // 红
        leftGrad.addColorStop(0.5,'#ECD806');   // 黄
        leftGrad.addColorStop(1,'#dfd706');     // 黄
        ctx.strokeStyle = leftGrad;
        ctx.arc(x,y,r,1.5*Math.PI,angle,true);
    }
    else if(point &lt;= 70){
        leftGrad =  ctx.createLinearGradient(x,y-r,x,y+r);          
        leftGrad.addColorStop(0.1,'#ff5151');   // 红
        leftGrad.addColorStop(0.5,'#ECD806');   // 黄 
        leftGrad.addColorStop(0.8,'#dfd706');   // 黄  
        leftGrad.addColorStop(1,'#7FCF00');     //绿
        ctx.beginPath();
        ctx.strokeStyle = leftGrad;     
        ctx.arc(x,y,r,1.5*Math.PI,0.5*Math.PI,true);
        ctx.stroke();
        ctx.beginPath();
        rightGrad = ctx.createLinearGradient(x,y+r+ringWidth/2.5,x,y);
        rightGrad.addColorStop(0.2,'#7FCF00');  //绿
        ctx.strokeStyle = rightGrad;
        ctx.arc(x,y,r,0.5*Math.PI,angle,true);
    }
    else if(point &lt; 100){
        leftGrad =  ctx.createLinearGradient(x,y-r,x,y+r);          
        leftGrad.addColorStop(0.1,'#ff5151');   // 红
        leftGrad.addColorStop(0.5,'#ECD806');   // 黄 
        leftGrad.addColorStop(0.8,'#dfd706');   // 黄
        leftGrad.addColorStop(1,'#7FCF00');
        ctx.beginPath();
        ctx.strokeStyle = leftGrad;     
        ctx.arc(x,y,r,1.5*Math.PI,0.5*Math.PI,true);
        ctx.stroke();
        ctx.beginPath();
        rightGrad = ctx.createLinearGradient(x,y+r,x,y);
        rightGrad.addColorStop(1,'#7FCF00');  //绿
        ctx.strokeStyle = rightGrad;
        ctx.arc(x,y,r,0.5*Math.PI,angle,true);      
    }
    else if(point === 100){
        ctx.strokeStyle = "#7FCF00";
        ctx.arc(x,y,r,0,2*Math.PI,true);            
    }   
    ctx.stroke();
    /*当动画的分数小于杀毒分数时，动画分数增加*/
    if(num &gt; point){
        point++;        
    }
    /*当动画的分数大于杀毒分数时，动画分数减小*/
    if(num &lt; point){
        point--;
    }
    /*实现动画*/
    setTimeout(function(){
        move(point);
    },30);  
</code></pre>

<p>};
```</p>

<p>再次说明尽量不要这样写函数，我本来是想拿出一个对象来讲的，我这样写的规范完全是蒙蔽了初学者，所以尽量不要照搬代码，我这里只是说思想罢了。</p>

<p>在移动控件的时候，动画会有抖动，我分析应该是因为控件的变化是实时的，像mousemove那样，超过了动画的帧，造成了抖动。在查毒测试中，是没有这样抖动的。</p>

<br>


<p>
[Ruby]:			http://www.ruby-lang.org						"Ruby"
[git]:			http://git-scm.com/								"Git"
[Jekyll]:		https://github.com/mojombo/jekyll/wiki			"Jekyll"
[Octopress]:	http://octopress.org							"Octopress"
[Markdown]:		http://daringfireball.net/projects/markdown/	"Markdown"
[Google]:		http://www.google.com							"Google"
[Yahoo]:		http://www.yahoo.com							"Yahoo"
[Twitter]:		http://twitter.com/								"Twitter"

[Firebug]:		http://getfirebug.com/							"Firebug"

[Wikipedia]:	http://www.wikipedia.org						"Wikipedia"
[维基百科]:		http://zh.wikipedia.org							"维基中文"

[煎蛋]:			http://jandan.net								"煎蛋"
[小众软件]:		http://appinn.com								"小众软件"
[小众]:			http://appinn.com								"小众软件"
[新浪微博]:		http://weibo.com								"新浪微博"
[微博]:			http://weibo.com								"新浪微博"
[墙]:			http://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E	"叹息之墙"
[知乎]:			http://www.zhihu.com							"知乎"

[CSSer]:		http://www.csser.com/							"CSSer"

[Node.JS]:		http://nodejs.org								"Node.JS"
[NPM]:			http://search.npmjs.org/						"NPM Registry"
[mocha]:		http://visionmedia.github.com/mocha/			"mocha"
[CoffeeScript]:	http://coffeescript.org/						"CoffeeScript"
[Coffee]:		http://coffeescript.org/						"CoffeeScript"
[JSCoverage]:	http://siliconforks.com/jscoverage/				"JSCoverage"
[node-jscoverage]: https://github.com/visionmedia/node-jscoverage "node-jscoverage"
[Jasmine]:		http://pivotal.github.com/jasmine/				"Jasmine"

[GitHub]:		https://github.com								"GitHub"

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html5模拟数码管实验]]></title>
    <link href="http://boia.github.com/blog/2013/03/17/num-light/"/>
    <updated>2013-03-17T21:36:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/17/num-light</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近在做物联网的东西，也好久没碰电子了，看到显示器，就想用<strong>HTML5</strong>模拟一个数码管玩玩，这个程序在前段时间已经完成了，今天本想着改进一下，不知道是不是因为实习前的"大姨爸"来了，特别的无力。</p>

<!-- more -->


<br><br>


<h2>瞻仰代码</h2>

<p>代码本不难，估计是隔了一段时间了，今天来看已经有点困难，如果要解释的话就更加地为难了。没有动画效果，没有复杂代码，只是在4*7的格子上画圆凑成一个数字，将每个数字的坐标存在数组里，然后用forEach(函数编程真妙...)将每个坐标都取出来画圆。</p>

<br><br>


<h2>看看jsFiddle</h2>

<p><iframe style="width: 100%; height: 450px" src="http://jsfiddle.net/59mNq/embedded/result,js,html,css/presentation/"></iframe></p>

<br><br>


<h2>最近浅淡</h2>

<p>毕设先要放一段时间了，专心实习，脑电波继续无力着...</p>

<p>
[Ruby]:			http://www.ruby-lang.org						"Ruby"
[git]:			http://git-scm.com/								"Git"
[Jekyll]:		https://github.com/mojombo/jekyll/wiki			"Jekyll"
[Octopress]:	http://octopress.org							"Octopress"
[Markdown]:		http://daringfireball.net/projects/markdown/	"Markdown"
[Google]:		http://www.google.com							"Google"
[Yahoo]:		http://www.yahoo.com							"Yahoo"
[Twitter]:		http://twitter.com/								"Twitter"

[Firebug]:		http://getfirebug.com/							"Firebug"

[Wikipedia]:	http://www.wikipedia.org						"Wikipedia"
[维基百科]:		http://zh.wikipedia.org							"维基中文"

[煎蛋]:			http://jandan.net								"煎蛋"
[小众软件]:		http://appinn.com								"小众软件"
[小众]:			http://appinn.com								"小众软件"
[新浪微博]:		http://weibo.com								"新浪微博"
[微博]:			http://weibo.com								"新浪微博"
[墙]:			http://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E	"叹息之墙"
[知乎]:			http://www.zhihu.com							"知乎"

[CSSer]:		http://www.csser.com/							"CSSer"

[Node.JS]:		http://nodejs.org								"Node.JS"
[NPM]:			http://search.npmjs.org/						"NPM Registry"
[mocha]:		http://visionmedia.github.com/mocha/			"mocha"
[CoffeeScript]:	http://coffeescript.org/						"CoffeeScript"
[Coffee]:		http://coffeescript.org/						"CoffeeScript"
[JSCoverage]:	http://siliconforks.com/jscoverage/				"JSCoverage"
[node-jscoverage]: https://github.com/visionmedia/node-jscoverage "node-jscoverage"
[Jasmine]:		http://pivotal.github.com/jasmine/				"Jasmine"

[GitHub]:		https://github.com								"GitHub"

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始html5]]></title>
    <link href="http://boia.github.com/blog/2013/03/16/begin-html5/"/>
    <updated>2013-03-16T11:44:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/16/begin-html5</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>作为一个自动化学院(传言专业被并到了计算机专业)的学生，对开发语言(面向对象)几乎没有接触过，C也是朦朦胧胧凭着最后两夜地奋斗通过了考试，可能天赋在此，考的还可以。大二搞起单片机，那时候还是用51，不知怎地就爱上了程序，不过至今还坚持着<strong>硬件和软件是一家</strong>的真理。</p>

<!-- more -->




<br><br>


<h2>编程</h2>

<p>一年前，偶然的机会让我知道了<a href="http://weibo.com/xiuyetang/">秀野堂</a>堂主，当时他的个人网站还是用纯HTML5写的，现在可能没有时间管理了。下载了他的6个视频，当时对web几乎不懂，就开始看起了他的教程视频，然后花了将近一周的时间写了一个纯静态的网站，而且只是<strong>html5</strong>，连常人熟知的div都没有(造成了现在搞个应用也不用div)，写出来以后还洋洋得意了好几天，现在觉得当时就是一纯2b，没见过世面的村儿。不知天高地厚地在3v.com申请了免费空间就上传了，ftp用起来还是蛮熟练的。css、js还得边看着手册边查用法的时候，就去下载了<strong>php_manual_zh.chm</strong>，或许真是脑子开窍，也可能是曾苦逼熬夜一个月细读C++手册感动了上天，将我的IQ提高了不少等等各种不为人知的缘由，学起新语言来轻轻松松，class、extend、implement、interface...这些我未曾碰过的关键词至今都刻在我脑子里。所以明白了一个道理:<strong>领悟编程，只是在等一个时机</strong>。</p>

<br><br>


<h2>论道HTML5</h2>

<p><a href="http://weibo.com/xiuyetang/">秀野堂</a>在一年前说要闭关做个关于webgl的游戏，然后就消失了，在这里我必须要感谢秀野堂，是他确定了我未来至少5年的方向，然而对于他出的书，在很早前我就在豆瓣中加入了想读的行列，一直没买(觉得不值...)，两天前拿到这本书，到今天也就看了一章，最近一直在搞脑电波(失败中...)。</p>

<p><img src="/images/post/lundaohtml5.png" title="论道HTML5" ><br><br></p>

<h2>总结</h2>

<p>坚持地搞下去...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蘑菇和小熊的游戏]]></title>
    <link href="http://boia.github.com/blog/2013/03/07/mushroom_bear/"/>
    <updated>2013-03-07T14:56:00+08:00</updated>
    <id>http://boia.github.com/blog/2013/03/07/mushroom_bear</id>
    <content type="html"><![CDATA[<p>把一个游戏移植过来，游戏是从一个<a href="http://jacebook.co.uk/blog/2010/09/11/html5-writing-a-game/">老外</a>那里看见的，他写了关于这个游戏的教程,我发现他的代码并不是特别好，也比较地乱，然后我就想着自己做一个，素材就直接从他那里盗过来了，终归我对设计并不是特别感兴趣,还有很多bug需要修改，不要吐槽。</p>

<!-- more -->


<br><br><br>


<p><img src="/images/post/mush_bear.png" title="mushroom_bear" ></p>

<br>


<p><a href="/game/mush-bear/game.html">开始游戏</a></p>

<p>
[Ruby]:			http://www.ruby-lang.org						"Ruby"
[git]:			http://git-scm.com/								"Git"
[Jekyll]:		https://github.com/mojombo/jekyll/wiki			"Jekyll"
[Octopress]:	http://octopress.org							"Octopress"
[Markdown]:		http://daringfireball.net/projects/markdown/	"Markdown"
[Google]:		http://www.google.com							"Google"
[Yahoo]:		http://www.yahoo.com							"Yahoo"
[Twitter]:		http://twitter.com/								"Twitter"

[Firebug]:		http://getfirebug.com/							"Firebug"

[Wikipedia]:	http://www.wikipedia.org						"Wikipedia"
[维基百科]:		http://zh.wikipedia.org							"维基中文"

[煎蛋]:			http://jandan.net								"煎蛋"
[小众软件]:		http://appinn.com								"小众软件"
[小众]:			http://appinn.com								"小众软件"
[新浪微博]:		http://weibo.com								"新浪微博"
[微博]:			http://weibo.com								"新浪微博"
[墙]:			http://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E	"叹息之墙"
[知乎]:			http://www.zhihu.com							"知乎"

[CSSer]:		http://www.csser.com/							"CSSer"

[Node.JS]:		http://nodejs.org								"Node.JS"
[NPM]:			http://search.npmjs.org/						"NPM Registry"
[mocha]:		http://visionmedia.github.com/mocha/			"mocha"
[CoffeeScript]:	http://coffeescript.org/						"CoffeeScript"
[Coffee]:		http://coffeescript.org/						"CoffeeScript"
[JSCoverage]:	http://siliconforks.com/jscoverage/				"JSCoverage"
[node-jscoverage]: https://github.com/visionmedia/node-jscoverage "node-jscoverage"
[Jasmine]:		http://pivotal.github.com/jasmine/				"Jasmine"

[GitHub]:		https://github.com								"GitHub"

</p>
]]></content>
  </entry>
  
</feed>
